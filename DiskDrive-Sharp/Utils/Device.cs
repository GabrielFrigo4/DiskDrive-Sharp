using Microsoft.Win32.SafeHandles;
using System.Runtime.InteropServices;

namespace DiskDrive_Sharp.Utils;

public static partial class DeviceDisk
{
    /* Definitions of constants taken here:
     https://github.com/SublimeText/Pywin32/blob/master/lib/x32/win32/lib/winioctlcon.py */
    #region CONSTANTS
    public static uint CTL_CODE(uint DeviceType, uint Function, uint Method, uint Access)
    {
        return ((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method);
    }

    public static readonly uint FILE_READ_DATA = 0x00000001;
    public static readonly uint FILE_WRITE_DATA = 0x00000002;

    public static readonly uint FILE_DEVICE_BEEP = 0x00000001;
    public static readonly uint FILE_DEVICE_CD_ROM = 0x00000002;
    public static readonly uint FILE_DEVICE_CD_ROM_FILE_SYSTEM = 0x00000003;
    public static readonly uint FILE_DEVICE_CONTROLLER = 0x00000004;
    public static readonly uint FILE_DEVICE_DATALINK = 0x00000005;
    public static readonly uint FILE_DEVICE_DFS = 0x00000006;
    public static readonly uint FILE_DEVICE_DISK = 0x00000007;
    public static readonly uint FILE_DEVICE_DISK_FILE_SYSTEM = 0x00000008;
    public static readonly uint FILE_DEVICE_FILE_SYSTEM = 0x00000009;
    public static readonly uint FILE_DEVICE_INPORT_PORT = 0x0000000a;
    public static readonly uint FILE_DEVICE_KEYBOARD = 0x0000000b;
    public static readonly uint FILE_DEVICE_MAILSLOT = 0x0000000c;
    public static readonly uint FILE_DEVICE_MIDI_IN = 0x0000000d;
    public static readonly uint FILE_DEVICE_MIDI_OUT = 0x0000000e;
    public static readonly uint FILE_DEVICE_MOUSE = 0x0000000f;
    public static readonly uint FILE_DEVICE_MULTI_UNC_PROVIDER = 0x00000010;
    public static readonly uint FILE_DEVICE_NAMED_PIPE = 0x00000011;
    public static readonly uint FILE_DEVICE_NETWORK = 0x00000012;
    public static readonly uint FILE_DEVICE_NETWORK_BROWSER = 0x00000013;
    public static readonly uint FILE_DEVICE_NETWORK_FILE_SYSTEM = 0x00000014;
    public static readonly uint FILE_DEVICE_NULL = 0x00000015;
    public static readonly uint FILE_DEVICE_PARALLEL_PORT = 0x00000016;
    public static readonly uint FILE_DEVICE_PHYSICAL_NETCARD = 0x00000017;
    public static readonly uint FILE_DEVICE_PRINTER = 0x00000018;
    public static readonly uint FILE_DEVICE_SCANNER = 0x00000019;
    public static readonly uint FILE_DEVICE_SERIAL_MOUSE_PORT = 0x0000001a;
    public static readonly uint FILE_DEVICE_SERIAL_PORT = 0x0000001b;
    public static readonly uint FILE_DEVICE_SCREEN = 0x0000001c;
    public static readonly uint FILE_DEVICE_SOUND = 0x0000001d;
    public static readonly uint FILE_DEVICE_STREAMS = 0x0000001e;
    public static readonly uint FILE_DEVICE_TAPE = 0x0000001f;
    public static readonly uint FILE_DEVICE_TAPE_FILE_SYSTEM = 0x00000020;
    public static readonly uint FILE_DEVICE_TRANSPORT = 0x00000021;
    public static readonly uint FILE_DEVICE_UNKNOWN = 0x00000022;
    public static readonly uint FILE_DEVICE_VIDEO = 0x00000023;
    public static readonly uint FILE_DEVICE_VIRTUAL_DISK = 0x00000024;
    public static readonly uint FILE_DEVICE_WAVE_IN = 0x00000025;
    public static readonly uint FILE_DEVICE_WAVE_OUT = 0x00000026;
    public static readonly uint FILE_DEVICE_8042_PORT = 0x00000027;
    public static readonly uint FILE_DEVICE_NETWORK_REDIRECTOR = 0x00000028;
    public static readonly uint FILE_DEVICE_BATTERY = 0x00000029;
    public static readonly uint FILE_DEVICE_BUS_EXTENDER = 0x0000002a;
    public static readonly uint FILE_DEVICE_MODEM = 0x0000002b;
    public static readonly uint FILE_DEVICE_VDM = 0x0000002c;
    public static readonly uint FILE_DEVICE_MASS_STORAGE = 0x0000002d;
    public static readonly uint FILE_DEVICE_SMB = 0x0000002e;
    public static readonly uint FILE_DEVICE_KS = 0x0000002f;
    public static readonly uint FILE_DEVICE_CHANGER = 0x00000030;
    public static readonly uint FILE_DEVICE_SMARTCARD = 0x00000031;
    public static readonly uint FILE_DEVICE_ACPI = 0x00000032;
    public static readonly uint FILE_DEVICE_DVD = 0x00000033;
    public static readonly uint FILE_DEVICE_FULLSCREEN_VIDEO = 0x00000034;
    public static readonly uint FILE_DEVICE_DFS_FILE_SYSTEM = 0x00000035;
    public static readonly uint FILE_DEVICE_DFS_VOLUME = 0x00000036;
    public static readonly uint FILE_DEVICE_SERENUM = 0x00000037;
    public static readonly uint FILE_DEVICE_TERMSRV = 0x00000038;
    public static readonly uint FILE_DEVICE_KSEC = 0x00000039;
    public static readonly uint FILE_DEVICE_FIPS = 0x0000003A;
    public static readonly uint FILE_DEVICE_INFINIBAND = 0x0000003B;

    public static readonly uint METHOD_BUFFERED = 0;
    public static readonly uint METHOD_IN_DIRECT = 1;
    public static readonly uint METHOD_OUT_DIRECT = 2;
    public static readonly uint METHOD_NEITHER = 3;
    public static readonly uint METHOD_DIRECT_TO_HARDWARE = METHOD_IN_DIRECT;
    public static readonly uint METHOD_DIRECT_FROM_HARDWARE = METHOD_OUT_DIRECT;
    public static readonly uint FILE_ANY_ACCESS = 0;
    public static readonly uint FILE_SPECIAL_ACCESS = FILE_ANY_ACCESS;
    public static readonly uint FILE_READ_ACCESS = 0x0001;
    public static readonly uint FILE_WRITE_ACCESS = 0x0002;
    public static readonly uint IOCTL_STORAGE_BASE = FILE_DEVICE_MASS_STORAGE;
    public static readonly uint RECOVERED_WRITES_VALID = 0x00000001;
    public static readonly uint UNRECOVERED_WRITES_VALID = 0x00000002;
    public static readonly uint RECOVERED_READS_VALID = 0x00000004;
    public static readonly uint UNRECOVERED_READS_VALID = 0x00000008;
    public static readonly uint WRITE_COMPRESSION_INFO_VALID = 0x00000010;
    public static readonly uint READ_COMPRESSION_INFO_VALID = 0x00000020;
    public static readonly uint TAPE_RETURN_STATISTICS = 0;
    public static readonly uint TAPE_RETURN_ENV_INFO = 1;
    public static readonly uint TAPE_RESET_STATISTICS = 2;
    public static readonly uint MEDIA_ERASEABLE = 0x00000001;
    public static readonly uint MEDIA_WRITE_ONCE = 0x00000002;
    public static readonly uint MEDIA_READ_ONLY = 0x00000004;
    public static readonly uint MEDIA_READ_WRITE = 0x00000008;
    public static readonly uint MEDIA_WRITE_PROTECTED = 0x00000100;
    public static readonly uint MEDIA_CURRENTLY_MOUNTED = 0x80000000;
    public static readonly uint IOCTL_DISK_BASE = FILE_DEVICE_DISK;
    public static readonly uint PARTITION_ENTRY_UNUSED = 0x00;
    public static readonly uint PARTITION_FAT_12 = 0x01;
    public static readonly uint PARTITION_XENIX_1 = 0x02;
    public static readonly uint PARTITION_XENIX_2 = 0x03;
    public static readonly uint PARTITION_FAT_16 = 0x04;
    public static readonly uint PARTITION_EXTENDED = 0x05;
    public static readonly uint PARTITION_HUGE = 0x06;
    public static readonly uint PARTITION_IFS = 0x07;
    public static readonly uint PARTITION_OS2BOOTMGR = 0x0A;
    public static readonly uint PARTITION_FAT32 = 0x0B;
    public static readonly uint PARTITION_FAT32_XINT13 = 0x0C;
    public static readonly uint PARTITION_XINT13 = 0x0E;
    public static readonly uint PARTITION_XINT13_EXTENDED = 0x0F;
    public static readonly uint PARTITION_PREP = 0x41;
    public static readonly uint PARTITION_LDM = 0x42;
    public static readonly uint PARTITION_UNIX = 0x63;
    public static readonly uint VALID_NTFT = 0xC0;
    public static readonly uint PARTITION_NTFT = 0x80;

    const ulong GPT_ATTRIBUTE_PLATFORM_REQUIRED = 0x0000000000000001;
    const ulong GPT_BASIC_DATA_ATTRIBUTE_NO_DRIVE_LETTER = 0x8000000000000000;
    const ulong GPT_BASIC_DATA_ATTRIBUTE_HIDDEN = 0x4000000000000000;
    const ulong GPT_BASIC_DATA_ATTRIBUTE_SHADOW_COPY = 0x2000000000000000;
    const ulong GPT_BASIC_DATA_ATTRIBUTE_READ_ONLY = 0x1000000000000000;

    public static readonly uint HIST_NO_OF_BUCKETS = 24;
    public static readonly uint DISK_LOGGING_START = 0;
    public static readonly uint DISK_LOGGING_STOP = 1;
    public static readonly uint DISK_LOGGING_DUMP = 2;
    public static readonly uint DISK_BINNING = 3;
    public static readonly uint CAP_ATA_ID_CMD = 1;
    public static readonly uint CAP_ATAPI_ID_CMD = 2;
    public static readonly uint CAP_SMART_CMD = 4;
    public static readonly uint ATAPI_ID_CMD = 0xA1;
    public static readonly uint ID_CMD = 0xEC;
    public static readonly uint SMART_CMD = 0xB0;
    public static readonly uint SMART_CYL_LOW = 0x4F;
    public static readonly uint SMART_CYL_HI = 0xC2;
    public static readonly uint SMART_NO_ERROR = 0;
    public static readonly uint SMART_IDE_ERROR = 1;
    public static readonly uint SMART_INVALID_FLAG = 2;
    public static readonly uint SMART_INVALID_COMMAND = 3;
    public static readonly uint SMART_INVALID_BUFFER = 4;
    public static readonly uint SMART_INVALID_DRIVE = 5;
    public static readonly uint SMART_INVALID_IOCTL = 6;
    public static readonly uint SMART_ERROR_NO_MEM = 7;
    public static readonly uint SMART_INVALID_REGISTER = 8;
    public static readonly uint SMART_NOT_SUPPORTED = 9;
    public static readonly uint SMART_NO_IDE_DEVICE = 10;
    public static readonly uint SMART_OFFLINE_ROUTINE_OFFLINE = 0;
    public static readonly uint SMART_SHORT_SELFTEST_OFFLINE = 1;
    public static readonly uint SMART_EXTENDED_SELFTEST_OFFLINE = 2;
    public static readonly uint SMART_ABORT_OFFLINE_SELFTEST = 127;
    public static readonly uint SMART_SHORT_SELFTEST_CAPTIVE = 129;
    public static readonly uint SMART_EXTENDED_SELFTEST_CAPTIVE = 130;
    public static readonly uint READ_ATTRIBUTE_BUFFER_SIZE = 512;
    public static readonly uint IDENTIFY_BUFFER_SIZE = 512;
    public static readonly uint READ_THRESHOLD_BUFFER_SIZE = 512;
    public static readonly uint SMART_LOG_SECTOR_SIZE = 512;
    public static readonly uint READ_ATTRIBUTES = 0xD0;
    public static readonly uint READ_THRESHOLDS = 0xD1;
    public static readonly uint ENABLE_DISABLE_AUTOSAVE = 0xD2;
    public static readonly uint SAVE_ATTRIBUTE_VALUES = 0xD3;
    public static readonly uint EXECUTE_OFFLINE_DIAGS = 0xD4;
    public static readonly uint SMART_READ_LOG = 0xD5;
    public static readonly uint SMART_WRITE_LOG = 0xd6;
    public static readonly uint ENABLE_SMART = 0xD8;
    public static readonly uint DISABLE_SMART = 0xD9;
    public static readonly uint RETURN_SMART_STATUS = 0xDA;
    public static readonly uint ENABLE_DISABLE_AUTO_OFFLINE = 0xDB;
    public static readonly uint IOCTL_CHANGER_BASE = FILE_DEVICE_CHANGER;
    public static readonly uint MAX_VOLUME_ID_SIZE = 36;
    public static readonly uint MAX_VOLUME_TEMPLATE_SIZE = 40;
    public static readonly uint VENDOR_ID_LENGTH = 8;
    public static readonly uint PRODUCT_ID_LENGTH = 16;
    public static readonly uint REVISION_LENGTH = 4;
    public static readonly uint SERIAL_NUMBER_LENGTH = 32;
    public static readonly uint CHANGER_BAR_CODE_SCANNER_INSTALLED = 0x00000001;
    public static readonly uint CHANGER_INIT_ELEM_STAT_WITH_RANGE = 0x00000002;
    public static readonly uint CHANGER_CLOSE_IEPORT = 0x00000004;
    public static readonly uint CHANGER_OPEN_IEPORT = 0x00000008;
    public static readonly uint CHANGER_STATUS_NON_VOLATILE = 0x00000010;
    public static readonly uint CHANGER_EXCHANGE_MEDIA = 0x00000020;
    public static readonly uint CHANGER_CLEANER_SLOT = 0x00000040;
    public static readonly uint CHANGER_LOCK_UNLOCK = 0x00000080;
    public static readonly uint CHANGER_CARTRIDGE_MAGAZINE = 0x00000100;
    public static readonly uint CHANGER_MEDIUM_FLIP = 0x00000200;
    public static readonly uint CHANGER_POSITION_TO_ELEMENT = 0x00000400;
    public static readonly uint CHANGER_REPORT_IEPORT_STATE = 0x00000800;
    public static readonly uint CHANGER_STORAGE_DRIVE = 0x00001000;
    public static readonly uint CHANGER_STORAGE_IEPORT = 0x00002000;
    public static readonly uint CHANGER_STORAGE_SLOT = 0x00004000;
    public static readonly uint CHANGER_STORAGE_TRANSPORT = 0x00008000;
    public static readonly uint CHANGER_DRIVE_CLEANING_REQUIRED = 0x00010000;
    public static readonly uint CHANGER_PREDISMOUNT_EJECT_REQUIRED = 0x00020000;
    public static readonly uint CHANGER_CLEANER_ACCESS_NOT_VALID = 0x00040000;
    public static readonly uint CHANGER_PREMOUNT_EJECT_REQUIRED = 0x00080000;
    public static readonly uint CHANGER_VOLUME_IDENTIFICATION = 0x00100000;
    public static readonly uint CHANGER_VOLUME_SEARCH = 0x00200000;
    public static readonly uint CHANGER_VOLUME_ASSERT = 0x00400000;
    public static readonly uint CHANGER_VOLUME_REPLACE = 0x00800000;
    public static readonly uint CHANGER_VOLUME_UNDEFINE = 0x01000000;
    public static readonly uint CHANGER_SERIAL_NUMBER_VALID = 0x04000000;
    public static readonly uint CHANGER_DEVICE_REINITIALIZE_CAPABLE = 0x08000000;
    public static readonly uint CHANGER_KEYPAD_ENABLE_DISABLE = 0x10000000;
    public static readonly uint CHANGER_DRIVE_EMPTY_ON_DOOR_ACCESS = 0x20000000;

    public static readonly uint CHANGER_RESERVED_BIT = 0x80000000;
    public static readonly uint CHANGER_PREDISMOUNT_ALIGN_TO_SLOT = 0x80000001;
    public static readonly uint CHANGER_PREDISMOUNT_ALIGN_TO_DRIVE = 0x80000002;
    public static readonly uint CHANGER_CLEANER_AUTODISMOUNT = 0x80000004;
    public static readonly uint CHANGER_TRUE_EXCHANGE_CAPABLE = 0x80000008;
    public static readonly uint CHANGER_SLOTS_USE_TRAYS = 0x80000010;
    public static readonly uint CHANGER_RTN_MEDIA_TO_ORIGINAL_ADDR = 0x80000020;
    public static readonly uint CHANGER_CLEANER_OPS_NOT_SUPPORTED = 0x80000040;
    public static readonly uint CHANGER_IEPORT_USER_CONTROL_OPEN = 0x80000080;
    public static readonly uint CHANGER_IEPORT_USER_CONTROL_CLOSE = 0x80000100;
    public static readonly uint CHANGER_MOVE_EXTENDS_IEPORT = 0x80000200;
    public static readonly uint CHANGER_MOVE_RETRACTS_IEPORT = 0x80000400;


    public static readonly uint CHANGER_TO_TRANSPORT = 0x01;
    public static readonly uint CHANGER_TO_SLOT = 0x02;
    public static readonly uint CHANGER_TO_IEPORT = 0x04;
    public static readonly uint CHANGER_TO_DRIVE = 0x08;
    public static readonly uint LOCK_UNLOCK_IEPORT = 0x01;
    public static readonly uint LOCK_UNLOCK_DOOR = 0x02;
    public static readonly uint LOCK_UNLOCK_KEYPAD = 0x04;
    public static readonly uint LOCK_ELEMENT = 0;
    public static readonly uint UNLOCK_ELEMENT = 1;
    public static readonly uint EXTEND_IEPORT = 2;
    public static readonly uint RETRACT_IEPORT = 3;
    public static readonly uint ELEMENT_STATUS_FULL = 0x00000001;
    public static readonly uint ELEMENT_STATUS_IMPEXP = 0x00000002;
    public static readonly uint ELEMENT_STATUS_EXCEPT = 0x00000004;
    public static readonly uint ELEMENT_STATUS_ACCESS = 0x00000008;
    public static readonly uint ELEMENT_STATUS_EXENAB = 0x00000010;
    public static readonly uint ELEMENT_STATUS_INENAB = 0x00000020;
    public static readonly uint ELEMENT_STATUS_PRODUCT_DATA = 0x00000040;
    public static readonly uint ELEMENT_STATUS_LUN_VALID = 0x00001000;
    public static readonly uint ELEMENT_STATUS_ID_VALID = 0x00002000;
    public static readonly uint ELEMENT_STATUS_NOT_BUS = 0x00008000;
    public static readonly uint ELEMENT_STATUS_INVERT = 0x00400000;
    public static readonly uint ELEMENT_STATUS_SVALID = 0x00800000;
    public static readonly uint ELEMENT_STATUS_PVOLTAG = 0x10000000;
    public static readonly uint ELEMENT_STATUS_AVOLTAG = 0x20000000;
    public static readonly uint ERROR_LABEL_UNREADABLE = 0x00000001;
    public static readonly uint ERROR_LABEL_QUESTIONABLE = 0x00000002;
    public static readonly uint ERROR_SLOT_NOT_PRESENT = 0x00000004;
    public static readonly uint ERROR_DRIVE_NOT_INSTALLED = 0x00000008;
    public static readonly uint ERROR_TRAY_MALFUNCTION = 0x00000010;
    public static readonly uint ERROR_INIT_STATUS_NEEDED = 0x00000011;
    public static readonly uint ERROR_UNHANDLED_ERROR = 0xFFFFFFFF;
    public static readonly uint SEARCH_ALL = 0x0;
    public static readonly uint SEARCH_PRIMARY = 0x1;
    public static readonly uint SEARCH_ALTERNATE = 0x2;
    public static readonly uint SEARCH_ALL_NO_SEQ = 0x4;
    public static readonly uint SEARCH_PRI_NO_SEQ = 0x5;
    public static readonly uint SEARCH_ALT_NO_SEQ = 0x6;
    public static readonly uint ASSERT_PRIMARY = 0x8;
    public static readonly uint ASSERT_ALTERNATE = 0x9;
    public static readonly uint REPLACE_PRIMARY = 0xA;
    public static readonly uint REPLACE_ALTERNATE = 0xB;
    public static readonly uint UNDEFINE_PRIMARY = 0xC;
    public static readonly uint UNDEFINE_ALTERNATE = 0xD;
    public static readonly uint USN_PAGE_SIZE = 0x1000;
    public static readonly uint USN_REASON_DATA_OVERWRITE = 0x00000001;
    public static readonly uint USN_REASON_DATA_EXTEND = 0x00000002;
    public static readonly uint USN_REASON_DATA_TRUNCATION = 0x00000004;
    public static readonly uint USN_REASON_NAMED_DATA_OVERWRITE = 0x00000010;
    public static readonly uint USN_REASON_NAMED_DATA_EXTEND = 0x00000020;
    public static readonly uint USN_REASON_NAMED_DATA_TRUNCATION = 0x00000040;
    public static readonly uint USN_REASON_FILE_CREATE = 0x00000100;
    public static readonly uint USN_REASON_FILE_DELETE = 0x00000200;
    public static readonly uint USN_REASON_EA_CHANGE = 0x00000400;
    public static readonly uint USN_REASON_SECURITY_CHANGE = 0x00000800;
    public static readonly uint USN_REASON_RENAME_OLD_NAME = 0x00001000;
    public static readonly uint USN_REASON_RENAME_NEW_NAME = 0x00002000;
    public static readonly uint USN_REASON_INDEXABLE_CHANGE = 0x00004000;
    public static readonly uint USN_REASON_BASIC_INFO_CHANGE = 0x00008000;
    public static readonly uint USN_REASON_HARD_LINK_CHANGE = 0x00010000;
    public static readonly uint USN_REASON_COMPRESSION_CHANGE = 0x00020000;
    public static readonly uint USN_REASON_ENCRYPTION_CHANGE = 0x00040000;
    public static readonly uint USN_REASON_OBJECT_ID_CHANGE = 0x00080000;
    public static readonly uint USN_REASON_REPARSE_POINT_CHANGE = 0x00100000;
    public static readonly uint USN_REASON_STREAM_CHANGE = 0x00200000;
    public static readonly uint USN_REASON_TRANSACTED_CHANGE = 0x00400000;
    public static readonly uint USN_REASON_CLOSE = 0x80000000;
    public static readonly uint USN_DELETE_FLAG_DELETE = 0x00000001;
    public static readonly uint USN_DELETE_FLAG_NOTIFY = 0x00000002;
    public static readonly uint USN_DELETE_VALID_FLAGS = 0x00000003;
    public static readonly uint USN_SOURCE_DATA_MANAGEMENT = 0x00000001;
    public static readonly uint USN_SOURCE_AUXILIARY_DATA = 0x00000002;
    public static readonly uint USN_SOURCE_REPLICATION_MANAGEMENT = 0x00000004;

    public static readonly uint MARK_HANDLE_PROTECT_CLUSTERS = 1;
    public static readonly uint MARK_HANDLE_TXF_SYSTEM_LOG = 4;
    public static readonly uint MARK_HANDLE_NOT_TXF_SYSTEM_LOG = 8;

    public static readonly uint VOLUME_IS_DIRTY = 0x00000001;
    public static readonly uint VOLUME_UPGRADE_SCHEDULED = 0x00000002;
    public static readonly uint VOLUME_SESSION_OPEN = 4;

    public static readonly uint FILE_PREFETCH_TYPE_FOR_CREATE = 1;
    public static readonly uint FILE_PREFETCH_TYPE_FOR_DIRENUM = 2;
    public static readonly uint FILE_PREFETCH_TYPE_FOR_CREATE_EX = 3;
    public static readonly uint FILE_PREFETCH_TYPE_FOR_DIRENUM_EX = 4;
    public static readonly uint FILE_PREFETCH_TYPE_MAX = 4;

    public static readonly uint FILESYSTEM_STATISTICS_TYPE_NTFS = 1;
    public static readonly uint FILESYSTEM_STATISTICS_TYPE_FAT = 2;
    public static readonly uint FILE_SET_ENCRYPTION = 0x00000001;
    public static readonly uint FILE_CLEAR_ENCRYPTION = 0x00000002;
    public static readonly uint STREAM_SET_ENCRYPTION = 0x00000003;
    public static readonly uint STREAM_CLEAR_ENCRYPTION = 0x00000004;
    public static readonly uint MAXIMUM_ENCRYPTION_VALUE = 0x00000004;
    public static readonly uint ENCRYPTION_FORMAT_DEFAULT = 0x01;
    public static readonly uint COMPRESSION_FORMAT_SPARSE = 0x4000;
    public static readonly uint COPYFILE_SIS_LINK = 0x0001;
    public static readonly uint COPYFILE_SIS_REPLACE = 0x0002;
    public static readonly uint COPYFILE_SIS_FLAGS = 0x0003;

    public static readonly uint IOCTL_STORAGE_CHECK_VERIFY = CTL_CODE(IOCTL_STORAGE_BASE, 0x0200, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_STORAGE_CHECK_VERIFY2 = CTL_CODE(IOCTL_STORAGE_BASE, 0x0200, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_STORAGE_MEDIA_REMOVAL = CTL_CODE(IOCTL_STORAGE_BASE, 0x0201, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_STORAGE_EJECT_MEDIA = CTL_CODE(IOCTL_STORAGE_BASE, 0x0202, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_STORAGE_LOAD_MEDIA = CTL_CODE(IOCTL_STORAGE_BASE, 0x0203, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_STORAGE_LOAD_MEDIA2 = CTL_CODE(IOCTL_STORAGE_BASE, 0x0203, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_STORAGE_RESERVE = CTL_CODE(IOCTL_STORAGE_BASE, 0x0204, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_STORAGE_RELEASE = CTL_CODE(IOCTL_STORAGE_BASE, 0x0205, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_STORAGE_FIND_NEW_DEVICES = CTL_CODE(IOCTL_STORAGE_BASE, 0x0206, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_STORAGE_EJECTION_CONTROL = CTL_CODE(IOCTL_STORAGE_BASE, 0x0250, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_STORAGE_MCN_CONTROL = CTL_CODE(IOCTL_STORAGE_BASE, 0x0251, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_STORAGE_GET_MEDIA_TYPES = CTL_CODE(IOCTL_STORAGE_BASE, 0x0300, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_STORAGE_GET_MEDIA_TYPES_EX = CTL_CODE(IOCTL_STORAGE_BASE, 0x0301, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_STORAGE_GET_MEDIA_SERIAL_NUMBER = CTL_CODE(IOCTL_STORAGE_BASE, 0x0304, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_STORAGE_GET_HOTPLUG_INFO = CTL_CODE(IOCTL_STORAGE_BASE, 0x0305, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_STORAGE_SET_HOTPLUG_INFO = CTL_CODE(IOCTL_STORAGE_BASE, 0x0306, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint IOCTL_STORAGE_RESET_BUS = CTL_CODE(IOCTL_STORAGE_BASE, 0x0400, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_STORAGE_RESET_DEVICE = CTL_CODE(IOCTL_STORAGE_BASE, 0x0401, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_STORAGE_BREAK_RESERVATION = CTL_CODE(IOCTL_STORAGE_BASE, 0x0405, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_STORAGE_GET_DEVICE_NUMBER = CTL_CODE(IOCTL_STORAGE_BASE, 0x0420, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_STORAGE_PREDICT_FAILURE = CTL_CODE(IOCTL_STORAGE_BASE, 0x0440, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_DISK_GET_DRIVE_GEOMETRY = CTL_CODE(IOCTL_DISK_BASE, 0x0000, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_DISK_GET_PARTITION_INFO = CTL_CODE(IOCTL_DISK_BASE, 0x0001, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_DISK_SET_PARTITION_INFO = CTL_CODE(IOCTL_DISK_BASE, 0x0002, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint IOCTL_DISK_GET_DRIVE_LAYOUT = CTL_CODE(IOCTL_DISK_BASE, 0x0003, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_DISK_SET_DRIVE_LAYOUT = CTL_CODE(IOCTL_DISK_BASE, 0x0004, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint IOCTL_DISK_VERIFY = CTL_CODE(IOCTL_DISK_BASE, 0x0005, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_DISK_FORMAT_TRACKS = CTL_CODE(IOCTL_DISK_BASE, 0x0006, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint IOCTL_DISK_REASSIGN_BLOCKS = CTL_CODE(IOCTL_DISK_BASE, 0x0007, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint IOCTL_DISK_PERFORMANCE = CTL_CODE(IOCTL_DISK_BASE, 0x0008, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_DISK_IS_WRITABLE = CTL_CODE(IOCTL_DISK_BASE, 0x0009, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_DISK_LOGGING = CTL_CODE(IOCTL_DISK_BASE, 0x000a, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_DISK_FORMAT_TRACKS_EX = CTL_CODE(IOCTL_DISK_BASE, 0x000b, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint IOCTL_DISK_HISTOGRAM_STRUCTURE = CTL_CODE(IOCTL_DISK_BASE, 0x000c, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_DISK_HISTOGRAM_DATA = CTL_CODE(IOCTL_DISK_BASE, 0x000d, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_DISK_HISTOGRAM_RESET = CTL_CODE(IOCTL_DISK_BASE, 0x000e, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_DISK_REQUEST_STRUCTURE = CTL_CODE(IOCTL_DISK_BASE, 0x000f, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_DISK_REQUEST_DATA = CTL_CODE(IOCTL_DISK_BASE, 0x0010, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_DISK_PERFORMANCE_OFF = CTL_CODE(IOCTL_DISK_BASE, 0x0018, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_DISK_CONTROLLER_NUMBER = CTL_CODE(IOCTL_DISK_BASE, 0x0011, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint SMART_GET_VERSION = CTL_CODE(IOCTL_DISK_BASE, 0x0020, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint SMART_SEND_DRIVE_COMMAND = CTL_CODE(IOCTL_DISK_BASE, 0x0021, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint SMART_RCV_DRIVE_DATA = CTL_CODE(IOCTL_DISK_BASE, 0x0022, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint IOCTL_DISK_GET_PARTITION_INFO_EX = CTL_CODE(IOCTL_DISK_BASE, 0x0012, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_DISK_SET_PARTITION_INFO_EX = CTL_CODE(IOCTL_DISK_BASE, 0x0013, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint IOCTL_DISK_GET_DRIVE_LAYOUT_EX = CTL_CODE(IOCTL_DISK_BASE, 0x0014, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_DISK_SET_DRIVE_LAYOUT_EX = CTL_CODE(IOCTL_DISK_BASE, 0x0015, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint IOCTL_DISK_CREATE_DISK = CTL_CODE(IOCTL_DISK_BASE, 0x0016, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint IOCTL_DISK_GET_LENGTH_INFO = CTL_CODE(IOCTL_DISK_BASE, 0x0017, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_DISK_GET_DRIVE_GEOMETRY_EX = CTL_CODE(IOCTL_DISK_BASE, 0x0028, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_DISK_REASSIGN_BLOCKS_EX = CTL_CODE(IOCTL_DISK_BASE, 0x0029, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);

    public static readonly uint IOCTL_DISK_UPDATE_DRIVE_SIZE = CTL_CODE(IOCTL_DISK_BASE, 0x0032, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint IOCTL_DISK_GROW_PARTITION = CTL_CODE(IOCTL_DISK_BASE, 0x0034, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint IOCTL_DISK_GET_CACHE_INFORMATION = CTL_CODE(IOCTL_DISK_BASE, 0x0035, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_DISK_SET_CACHE_INFORMATION = CTL_CODE(IOCTL_DISK_BASE, 0x0036, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);

    public static readonly uint OBSOLETE_IOCTL_STORAGE_RESET_BUS = CTL_CODE(IOCTL_STORAGE_BASE, 0x0400, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint OBSOLETE_IOCTL_STORAGE_RESET_DEVICE = CTL_CODE(IOCTL_STORAGE_BASE, 0x0401, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);

    public static readonly uint OBSOLETE_DISK_GET_WRITE_CACHE_STATE = CTL_CODE(IOCTL_DISK_BASE, 0x0037, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_DISK_GET_WRITE_CACHE_STATE=OBSOLETE_DISK_GET_WRITE_CACHE_STATE;


    public static readonly uint IOCTL_DISK_DELETE_DRIVE_LAYOUT = CTL_CODE(IOCTL_DISK_BASE, 0x0040, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint IOCTL_DISK_UPDATE_PROPERTIES = CTL_CODE(IOCTL_DISK_BASE, 0x0050, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_DISK_FORMAT_DRIVE = CTL_CODE(IOCTL_DISK_BASE, 0x00f3, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint IOCTL_DISK_SENSE_DEVICE = CTL_CODE(IOCTL_DISK_BASE, 0x00f8, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_DISK_CHECK_VERIFY = CTL_CODE(IOCTL_DISK_BASE, 0x0200, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_DISK_MEDIA_REMOVAL = CTL_CODE(IOCTL_DISK_BASE, 0x0201, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_DISK_EJECT_MEDIA = CTL_CODE(IOCTL_DISK_BASE, 0x0202, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_DISK_LOAD_MEDIA = CTL_CODE(IOCTL_DISK_BASE, 0x0203, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_DISK_RESERVE = CTL_CODE(IOCTL_DISK_BASE, 0x0204, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_DISK_RELEASE = CTL_CODE(IOCTL_DISK_BASE, 0x0205, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_DISK_FIND_NEW_DEVICES = CTL_CODE(IOCTL_DISK_BASE, 0x0206, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_DISK_GET_MEDIA_TYPES = CTL_CODE(IOCTL_DISK_BASE, 0x0300, METHOD_BUFFERED, FILE_ANY_ACCESS);

    public static readonly uint DISK_HISTOGRAM_SIZE = 72;
    public static readonly uint HISTOGRAM_BUCKET_SIZE = 8;

    public static readonly uint IOCTL_CHANGER_GET_PARAMETERS = CTL_CODE(IOCTL_CHANGER_BASE, 0x0000, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_CHANGER_GET_STATUS = CTL_CODE(IOCTL_CHANGER_BASE, 0x0001, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_CHANGER_GET_PRODUCT_DATA = CTL_CODE(IOCTL_CHANGER_BASE, 0x0002, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_CHANGER_SET_ACCESS = CTL_CODE(IOCTL_CHANGER_BASE, 0x0004, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint IOCTL_CHANGER_GET_ELEMENT_STATUS = CTL_CODE(IOCTL_CHANGER_BASE, 0x0005, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint IOCTL_CHANGER_INITIALIZE_ELEMENT_STATUS = CTL_CODE(IOCTL_CHANGER_BASE, 0x0006, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_CHANGER_SET_POSITION = CTL_CODE(IOCTL_CHANGER_BASE, 0x0007, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_CHANGER_EXCHANGE_MEDIUM = CTL_CODE(IOCTL_CHANGER_BASE, 0x0008, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_CHANGER_MOVE_MEDIUM = CTL_CODE(IOCTL_CHANGER_BASE, 0x0009, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_CHANGER_REINITIALIZE_TRANSPORT = CTL_CODE(IOCTL_CHANGER_BASE, 0x000A, METHOD_BUFFERED, FILE_READ_ACCESS);
    public static readonly uint IOCTL_CHANGER_QUERY_VOLUME_TAGS = CTL_CODE(IOCTL_CHANGER_BASE, 0x000B, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
    public static readonly uint IOCTL_SERIAL_LSRMST_INSERT = CTL_CODE(FILE_DEVICE_SERIAL_PORT,31, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_SERENUM_EXPOSE_HARDWARE = CTL_CODE(FILE_DEVICE_SERENUM,128, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_SERENUM_REMOVE_HARDWARE = CTL_CODE(FILE_DEVICE_SERENUM,129, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_SERENUM_PORT_DESC = CTL_CODE(FILE_DEVICE_SERENUM,130, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_SERENUM_GET_PORT_NAME = CTL_CODE(FILE_DEVICE_SERENUM,131, METHOD_BUFFERED, FILE_ANY_ACCESS);

    public static readonly uint SERIAL_LSRMST_ESCAPE = 0x00;
    public static readonly uint SERIAL_LSRMST_LSR_DATA = 0x01;
    public static readonly uint SERIAL_LSRMST_LSR_NODATA = 0x02;
    public static readonly uint SERIAL_LSRMST_MST = 0x03;
    public static readonly uint SERIAL_IOC_FCR_FIFO_ENABLE = 0x00000001;
    public static readonly uint SERIAL_IOC_FCR_RCVR_RESET = 0x00000002;
    public static readonly uint SERIAL_IOC_FCR_XMIT_RESET = 0x00000004;
    public static readonly uint SERIAL_IOC_FCR_DMA_MODE = 0x00000008;
    public static readonly uint SERIAL_IOC_FCR_RES1 = 0x00000010;
    public static readonly uint SERIAL_IOC_FCR_RES2 = 0x00000020;
    public static readonly uint SERIAL_IOC_FCR_RCVR_TRIGGER_LSB = 0x00000040;
    public static readonly uint SERIAL_IOC_FCR_RCVR_TRIGGER_MSB = 0x00000080;
    public static readonly uint SERIAL_IOC_MCR_DTR = 0x00000001;
    public static readonly uint SERIAL_IOC_MCR_RTS = 0x00000002;
    public static readonly uint SERIAL_IOC_MCR_OUT1 = 0x00000004;
    public static readonly uint SERIAL_IOC_MCR_OUT2 = 0x00000008;
    public static readonly uint SERIAL_IOC_MCR_LOOP = 0x00000010;
    public static readonly uint FSCTL_REQUEST_OPLOCK_LEVEL_1 = CTL_CODE(FILE_DEVICE_FILE_SYSTEM,  0, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_REQUEST_OPLOCK_LEVEL_2 = CTL_CODE(FILE_DEVICE_FILE_SYSTEM,  1, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_REQUEST_BATCH_OPLOCK = CTL_CODE(FILE_DEVICE_FILE_SYSTEM,  2, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_OPLOCK_BREAK_ACKNOWLEDGE = CTL_CODE(FILE_DEVICE_FILE_SYSTEM,  3, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_OPBATCH_ACK_CLOSE_PENDING = CTL_CODE(FILE_DEVICE_FILE_SYSTEM,  4, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_OPLOCK_BREAK_NOTIFY = CTL_CODE(FILE_DEVICE_FILE_SYSTEM,  5, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_LOCK_VOLUME = CTL_CODE(FILE_DEVICE_FILE_SYSTEM,  6, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_UNLOCK_VOLUME = CTL_CODE(FILE_DEVICE_FILE_SYSTEM,  7, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_DISMOUNT_VOLUME = CTL_CODE(FILE_DEVICE_FILE_SYSTEM,  8, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_IS_VOLUME_MOUNTED = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 10, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_IS_PATHNAME_VALID = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 11, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_MARK_VOLUME_DIRTY = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 12, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_QUERY_RETRIEVAL_POINTERS = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 14, METHOD_NEITHER, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_GET_COMPRESSION = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 15, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_SET_COMPRESSION = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 16, METHOD_BUFFERED, FILE_READ_DATA | FILE_WRITE_DATA);
    public static readonly uint FSCTL_MARK_AS_SYSTEM_HIVE = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 19, METHOD_NEITHER, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_OPLOCK_BREAK_ACK_NO_2 = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 20, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_INVALIDATE_VOLUMES = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 21, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_QUERY_FAT_BPB = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 22, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_REQUEST_FILTER_OPLOCK = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 23, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_FILESYSTEM_GET_STATISTICS = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 24, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_GET_NTFS_VOLUME_DATA = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 25, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_GET_NTFS_FILE_RECORD = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 26, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_GET_VOLUME_BITMAP = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 27, METHOD_NEITHER, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_GET_RETRIEVAL_POINTERS = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 28, METHOD_NEITHER, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_MOVE_FILE = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 29, METHOD_BUFFERED, FILE_SPECIAL_ACCESS);
    public static readonly uint FSCTL_IS_VOLUME_DIRTY = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 30, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_ALLOW_EXTENDED_DASD_IO = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 32, METHOD_NEITHER, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_FIND_FILES_BY_SID = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 35, METHOD_NEITHER, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_SET_OBJECT_ID = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 38, METHOD_BUFFERED, FILE_SPECIAL_ACCESS);
    public static readonly uint FSCTL_GET_OBJECT_ID = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 39, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_DELETE_OBJECT_ID = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 40, METHOD_BUFFERED, FILE_SPECIAL_ACCESS);
    public static readonly uint FSCTL_SET_REPARSE_POINT = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 41, METHOD_BUFFERED, FILE_SPECIAL_ACCESS);
    public static readonly uint FSCTL_GET_REPARSE_POINT = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 42, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_DELETE_REPARSE_POINT = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 43, METHOD_BUFFERED, FILE_SPECIAL_ACCESS);
    public static readonly uint FSCTL_ENUM_USN_DATA = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 44, METHOD_NEITHER, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_SECURITY_ID_CHECK = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 45, METHOD_NEITHER, FILE_READ_DATA);
    public static readonly uint FSCTL_READ_USN_JOURNAL = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 46, METHOD_NEITHER, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_SET_OBJECT_ID_EXTENDED = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 47, METHOD_BUFFERED, FILE_SPECIAL_ACCESS);
    public static readonly uint FSCTL_CREATE_OR_GET_OBJECT_ID = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 48, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_SET_SPARSE = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 49, METHOD_BUFFERED, FILE_SPECIAL_ACCESS);
    public static readonly uint FSCTL_SET_ZERO_DATA = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 50, METHOD_BUFFERED, FILE_WRITE_DATA);
    public static readonly uint FSCTL_QUERY_ALLOCATED_RANGES = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 51, METHOD_NEITHER, FILE_READ_DATA);
    public static readonly uint FSCTL_SET_ENCRYPTION = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 53, METHOD_NEITHER, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_ENCRYPTION_FSCTL_IO = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 54, METHOD_NEITHER, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_WRITE_RAW_ENCRYPTED = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 55, METHOD_NEITHER, FILE_SPECIAL_ACCESS);
    public static readonly uint FSCTL_READ_RAW_ENCRYPTED = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 56, METHOD_NEITHER, FILE_SPECIAL_ACCESS);
    public static readonly uint FSCTL_CREATE_USN_JOURNAL = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 57, METHOD_NEITHER, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_READ_FILE_USN_DATA = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 58, METHOD_NEITHER, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_WRITE_USN_CLOSE_RECORD = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 59, METHOD_NEITHER, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_EXTEND_VOLUME = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 60, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_QUERY_USN_JOURNAL = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 61, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_DELETE_USN_JOURNAL = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 62, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_MARK_HANDLE = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 63, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_SIS_COPYFILE = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 64, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_SIS_LINK_FILES = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 65, METHOD_BUFFERED, FILE_READ_DATA | FILE_WRITE_DATA);
    public static readonly uint FSCTL_HSM_MSG = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 66, METHOD_BUFFERED, FILE_READ_DATA | FILE_WRITE_DATA);
    public static readonly uint FSCTL_HSM_DATA = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 68, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA);
    public static readonly uint FSCTL_RECALL_FILE = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 69, METHOD_NEITHER, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_READ_FROM_PLEX = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 71, METHOD_OUT_DIRECT, FILE_READ_DATA);
    public static readonly uint FSCTL_FILE_PREFETCH = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 72, METHOD_BUFFERED, FILE_SPECIAL_ACCESS);
    public static readonly uint FSCTL_MAKE_MEDIA_COMPATIBLE = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 76, METHOD_BUFFERED, FILE_WRITE_DATA);
    public static readonly uint FSCTL_SET_DEFECT_MANAGEMENT = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 77, METHOD_BUFFERED, FILE_WRITE_DATA);
    public static readonly uint FSCTL_QUERY_SPARING_INFO = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 78, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_QUERY_ON_DISK_VOLUME_INFO = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 79, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_SET_VOLUME_COMPRESSION_STATE = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 80, METHOD_BUFFERED, FILE_SPECIAL_ACCESS);
    public static readonly uint FSCTL_TXFS_MODIFY_RM = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 81, METHOD_BUFFERED, FILE_WRITE_DATA);
    public static readonly uint FSCTL_TXFS_QUERY_RM_INFORMATION = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 82, METHOD_BUFFERED, FILE_READ_DATA);
    public static readonly uint FSCTL_TXFS_ROLLFORWARD_REDO = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 84, METHOD_BUFFERED, FILE_WRITE_DATA);
    public static readonly uint FSCTL_TXFS_ROLLFORWARD_UNDO = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 85, METHOD_BUFFERED, FILE_WRITE_DATA);
    public static readonly uint FSCTL_TXFS_START_RM = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 86, METHOD_BUFFERED, FILE_WRITE_DATA);
    public static readonly uint FSCTL_TXFS_SHUTDOWN_RM = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 87, METHOD_BUFFERED, FILE_WRITE_DATA);
    public static readonly uint FSCTL_TXFS_READ_BACKUP_INFORMATION = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 88, METHOD_BUFFERED, FILE_READ_DATA);
    public static readonly uint FSCTL_TXFS_WRITE_BACKUP_INFORMATION = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 89, METHOD_BUFFERED, FILE_WRITE_DATA);
    public static readonly uint FSCTL_TXFS_CREATE_SECONDARY_RM = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 90, METHOD_BUFFERED, FILE_WRITE_DATA);
    public static readonly uint FSCTL_TXFS_GET_METADATA_INFO = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 91, METHOD_BUFFERED, FILE_READ_DATA);
    public static readonly uint FSCTL_TXFS_GET_TRANSACTED_VERSION = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 92, METHOD_BUFFERED, FILE_READ_DATA);
    public static readonly uint FSCTL_TXFS_CREATE_MINIVERSION = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 95, METHOD_BUFFERED, FILE_WRITE_DATA);
    public static readonly uint FSCTL_TXFS_TRANSACTION_ACTIVE = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 99, METHOD_BUFFERED, FILE_READ_DATA);
    public static readonly uint FSCTL_SET_ZERO_ON_DEALLOCATION = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 101, METHOD_BUFFERED, FILE_SPECIAL_ACCESS);
    public static readonly uint FSCTL_SET_REPAIR = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 102, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_GET_REPAIR = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 103, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_WAIT_FOR_REPAIR = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 104, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_INITIATE_REPAIR = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 106, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_CSC_INTERNAL = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 107, METHOD_NEITHER, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_SHRINK_VOLUME = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 108, METHOD_BUFFERED, FILE_SPECIAL_ACCESS);
    public static readonly uint FSCTL_SET_SHORT_NAME_BEHAVIOR = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 109, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_DFSR_SET_GHOST_HANDLE_STATE = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 110, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint FSCTL_TXFS_LIST_TRANSACTION_LOCKED_FILES = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 120, METHOD_BUFFERED, FILE_READ_DATA);
    public static readonly uint FSCTL_TXFS_LIST_TRANSACTIONS = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 121, METHOD_BUFFERED, FILE_READ_DATA);
    public static readonly uint FSCTL_QUERY_PAGEFILE_ENCRYPTION = CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 122, METHOD_BUFFERED, FILE_ANY_ACCESS);

    public static readonly uint IOCTL_VOLUME_BASE =  'V';
    public static readonly uint IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS = CTL_CODE(IOCTL_VOLUME_BASE, 0, METHOD_BUFFERED, FILE_ANY_ACCESS);
    public static readonly uint IOCTL_VOLUME_IS_CLUSTERED = CTL_CODE(IOCTL_VOLUME_BASE, 12, METHOD_BUFFERED, FILE_ANY_ACCESS);

    public static readonly uint DDS_4mm = 32;
    public static readonly uint MiniQic = 33;
    public static readonly uint Travan = 34;
    public static readonly uint QIC = 35;
    public static readonly uint MP_8mm = 36;
    public static readonly uint AME_8mm = 37;
    public static readonly uint AIT1_8mm = 38;
    public static readonly uint DLT = 39;
    public static readonly uint NCTP = 40;
    public static readonly uint IBM_3480 = 41;
    public static readonly uint IBM_3490E = 42;
    public static readonly uint IBM_Magstar_3590 = 43;
    public static readonly uint IBM_Magstar_MP = 44;
    public static readonly uint STK_DATA_D3 = 45;
    public static readonly uint SONY_DTF = 46;
    public static readonly uint DV_6mm = 47;
    public static readonly uint DMI = 48;
    public static readonly uint SONY_D2 = 49;
    public static readonly uint CLEANER_CARTRIDGE = 50;
    public static readonly uint CD_ROM = 51;
    public static readonly uint CD_R = 52;
    public static readonly uint CD_RW = 53;
    public static readonly uint DVD_ROM = 54;
    public static readonly uint DVD_R = 55;
    public static readonly uint DVD_RW = 56;
    public static readonly uint MO_3_RW = 57;
    public static readonly uint MO_5_WO = 58;
    public static readonly uint MO_5_RW = 59;
    public static readonly uint MO_5_LIMDOW = 60;
    public static readonly uint PC_5_WO = 61;
    public static readonly uint PC_5_RW = 62;
    public static readonly uint PD_5_RW = 63;
    public static readonly uint ABL_5_WO = 64;
    public static readonly uint PINNACLE_APEX_5_RW = 65;
    public static readonly uint SONY_12_WO = 66;
    public static readonly uint PHILIPS_12_WO = 67;
    public static readonly uint HITACHI_12_WO = 68;
    public static readonly uint CYGNET_12_WO = 69;
    public static readonly uint KODAK_14_WO = 70;
    public static readonly uint MO_NFR_525 = 71;
    public static readonly uint NIKON_12_RW = 72;
    public static readonly uint IOMEGA_ZIP = 73;
    public static readonly uint IOMEGA_JAZ = 74;
    public static readonly uint SYQUEST_EZ135 = 75;
    public static readonly uint SYQUEST_EZFLYER = 76;
    public static readonly uint SYQUEST_SYJET = 77;
    public static readonly uint AVATAR_F2 = 78;
    public static readonly uint MP2_8mm = 79;
    public static readonly uint DST_S = 80;
    public static readonly uint DST_M = 81;
    public static readonly uint DST_L = 82;
    public static readonly uint VXATape_1 = 83;
    public static readonly uint VXATape_2 = 84;
    public static readonly uint STK_9840 = 85;
    public static readonly uint LTO_Ultrium = 86;
    public static readonly uint LTO_Accelis = 87;
    public static readonly uint DVD_RAM = 88;
    public static readonly uint AIT_8mm = 89;
    public static readonly uint ADR_1 = 90;
    public static readonly uint ADR_2 = 91;
    public static readonly uint STK_9940 = 92;

    public static readonly uint BusTypeUnknown = 0;
    public static readonly uint BusTypeScsi = 1;
    public static readonly uint BusTypeAtapi = 2;
    public static readonly uint BusTypeAta = 3;
    public static readonly uint BusType1394 = 4;
    public static readonly uint BusTypeSsa = 5;
    public static readonly uint BusTypeFibre = 6;
    public static readonly uint BusTypeUsb = 7;
    public static readonly uint BusTypeRAID = 8;
    public static readonly uint BusTypeiScsi = 9;
    public static readonly uint BusTypeSas = 10;
    public static readonly uint BusTypeSata = 11;
    public static readonly uint BusTypeMaxReserved = 127;

    public static readonly uint Unknown = 0;
    public static readonly uint F5_1Pt2_512 = 1;
    public static readonly uint F3_1Pt44_512 = 2;
    public static readonly uint F3_2Pt88_512 = 3;
    public static readonly uint F3_20Pt8_512 = 4;
    public static readonly uint F3_720_512 = 5;
    public static readonly uint F5_360_512 = 6;
    public static readonly uint F5_320_512 = 7;
    public static readonly uint F5_320_1024 = 8;
    public static readonly uint F5_180_512 = 9;
    public static readonly uint F5_160_512 = 10;
    public static readonly uint RemovableMedia = 11;
    public static readonly uint FixedMedia = 12;
    public static readonly uint F3_120M_512 = 13;
    public static readonly uint F3_640_512 = 14;
    public static readonly uint F5_640_512 = 15;
    public static readonly uint F5_720_512 = 16;
    public static readonly uint F3_1Pt2_512 = 17;
    public static readonly uint F3_1Pt23_1024 = 18;
    public static readonly uint F5_1Pt23_1024 = 19;
    public static readonly uint F3_128Mb_512 = 20;
    public static readonly uint F3_230Mb_512 = 21;
    public static readonly uint F8_256_128 = 22;
    public static readonly uint F3_200Mb_512 = 23;
    public static readonly uint F3_240M_512 = 24;
    public static readonly uint F3_32M_512 = 25;

    public static readonly uint PARTITION_STYLE_MBR = 0;
    public static readonly uint PARTITION_STYLE_GPT = 1;
    public static readonly uint PARTITION_STYLE_RAW = 2;

    public static readonly uint DetectNone = 0;
    public static readonly uint DetectInt13 = 1;
    public static readonly uint DetectExInt13 = 2;

    public static readonly uint EqualPriority = 0;
    public static readonly uint KeepPrefetchedData = 1;
    public static readonly uint KeepReadData = 2;

    public static readonly uint DiskWriteCacheNormal = 0;
    public static readonly uint DiskWriteCacheForceDisable = 1;
    public static readonly uint DiskWriteCacheDisableNotSupported = 2;

    public static readonly uint RequestSize = 0;
    public static readonly uint RequestLocation = 1;

    public static readonly uint DeviceProblemNone = 0;
    public static readonly uint DeviceProblemHardware = 1;
    public static readonly uint DeviceProblemCHMError = 2;
    public static readonly uint DeviceProblemDoorOpen = 3;
    public static readonly uint DeviceProblemCalibrationError = 4;
    public static readonly uint DeviceProblemTargetFailure = 5;
    public static readonly uint DeviceProblemCHMMoveError = 6;
    public static readonly uint DeviceProblemCHMZeroError = 7;
    public static readonly uint DeviceProblemCartridgeInsertError = 8;
    public static readonly uint DeviceProblemPositionError = 9;
    public static readonly uint DeviceProblemSensorError = 10;
    public static readonly uint DeviceProblemCartridgeEjectError = 11;
    public static readonly uint DeviceProblemGripperError = 12;
    public static readonly uint DeviceProblemDriveError = 13;
    #endregion

    #region DeviceIoControl
    public static bool DeviceIoControl
    (SafeFileHandle hDevice, uint dwIoControlCode)
    {
        return DeviceIoControl(hDevice, dwIoControlCode,
            nint.Zero, 0, nint.Zero, 0, out _, nint.Zero);
    }

    public static bool DeviceIoControl
        (SafeFileHandle hDevice, uint dwIoControlCode,
        nint lpInBuffer, uint nInBufferSize,
        nint lpOutBuffer, uint nOutBufferSize)
    {
        return DeviceIoControl(hDevice, dwIoControlCode,
            lpInBuffer, nInBufferSize,
            lpOutBuffer, nOutBufferSize,
            out _, nint.Zero);
    }

    [return: MarshalAs(UnmanagedType.Bool)]
    [LibraryImport("kernel32.dll", SetLastError = true)]
    public static partial bool DeviceIoControl
        (SafeFileHandle hDevice, uint dwIoControlCode,
        nint lpInBuffer, uint nInBufferSize,
        nint lpOutBuffer, uint nOutBufferSize,
        out uint lpBytesReturned, nint lpOverlapped);
    #endregion
}
